/**
 * base types for GraphQL query layer
 *
 * @package: HoloREA
 * @since:   2019-05-20
 */
import { GraphQLScalarType } from 'graphql';
import { Kind } from 'graphql/language/index.js';
import Big from 'big.js';
export function addTypename(name) {
    return (obj) => {
        obj['__typename'] = name;
        return obj;
    };
}
export function injectTypename(name, fn) {
    return async (root, args) => {
        const data = await fn(root, args);
        data['__typename'] = name;
        return data;
    };
}
// VfModule listing.
// for the reference, see:
// https://lab.allmende.io/valueflows/vf-schemas/vf-graphql/-/tree/sprout/lib/schemas
// enum containing the not yet implemented VfModule
// obviously, move the variant to VfModule if implementing
// it
var UnimplementedVfModule;
(function (UnimplementedVfModule) {
    UnimplementedVfModule["Geolocation"] = "geolocation";
    UnimplementedVfModule["History"] = "history";
    UnimplementedVfModule["Recipe"] = "recipe";
    UnimplementedVfModule["Scenario"] = "scenario";
    UnimplementedVfModule["ProductBatch"] = "product_batch";
    UnimplementedVfModule["Appreciation"] = "appreciation";
    UnimplementedVfModule["Claim"] = "claim";
    UnimplementedVfModule["Filtering"] = "filtering";
    UnimplementedVfModule["Ordering"] = "ordering";
})(UnimplementedVfModule || (UnimplementedVfModule = {}));
// enum containing the implemented VF modules.
// separate from above so that developers can import the enum and not turn on useless
// features
export var VfModule;
(function (VfModule) {
    // always required regardless
    // see: https://lab.allmende.io/valueflows/vf-schemas/vf-graphql/-/blob/sprout/lib/index.js#L29
    VfModule["Util"] = "util";
    VfModule["Pagination"] = "pagination";
    VfModule["History"] = "history";
    // optional to enable
    VfModule["Agent"] = "agent";
    VfModule["Agreement"] = "agreement";
    VfModule["Action"] = "action";
    VfModule["ProcessSpecification"] = "process_specification";
    VfModule["ResourceSpecification"] = "resource_specification";
    VfModule["Measurement"] = "measurement";
    VfModule["Observation"] = "observation";
    VfModule["Process"] = "process";
    VfModule["Plan"] = "plan";
    VfModule["Fulfillment"] = "fulfillment";
    VfModule["Intent"] = "intent";
    VfModule["Commitment"] = "commitment";
    VfModule["Satisfaction"] = "satisfaction";
    VfModule["Proposal"] = "proposal";
    VfModule["Recipe"] = "recipe";
})(VfModule || (VfModule = {}));
// default 'full suite' VF module set supported by hREA
export const DEFAULT_VF_MODULES = [
    VfModule.History,
    // Specification DNA
    VfModule.Action,
    VfModule.ProcessSpecification,
    VfModule.ResourceSpecification,
    VfModule.Measurement,
    // Agent DNA
    VfModule.Agent,
    // Agreement DNA
    VfModule.Agreement,
    // Observation DNA
    VfModule.Observation,
    VfModule.Process,
    // Proposal DNA
    VfModule.Proposal,
    // Plan DNA
    VfModule.Plan,
    // Planning DNA
    VfModule.Fulfillment,
    VfModule.Intent,
    VfModule.Commitment,
    VfModule.Satisfaction,
    // Recipe DNA
    VfModule.Recipe,
];
// scalar types
export const URI = new GraphQLScalarType({
    name: 'URI',
    description: 'The `URI` type declares a reference to any resolvable resource.',
    serialize: (v) => v,
    parseValue: (v) => v,
    parseLiteral(ast) {
        if (ast.kind === Kind.STRING) {
            if (!ast.value.match(/^\w+:/)) {
                throw new Error('Unable to parse URI- invalid format');
            }
            return ast.value;
        }
        return null;
    },
});
// :TODO: this should be a GraphQLScalarType<Big, string> to avoid precision loss at API boundary
export const Decimal = new GraphQLScalarType({
    name: 'Decimal',
    description: 'The `Decimal` scalar type to handle precision arithmetic and potentially large values.',
    serialize: (v) => v.toNumber(),
    parseValue: (v) => Big(v),
    parseLiteral(ast) {
        if (ast.kind !== Kind.STRING && ast.kind !== Kind.INT && ast.kind !== Kind.FLOAT) {
            // @ts-ignore
            throw new TypeError(String(ast.value) + ' is not a valid decimal value.');
        }
        return Big(ast.value);
    }
});
//# sourceMappingURL=data:application/json;base64,