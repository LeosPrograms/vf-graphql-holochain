/**
 * agent mutations
 *
 * @package: hREA
 * @since:   2022-06-08
 */
import { mapZomeFn } from '../connection.js';
export default (dnaConfig, conductorUri) => {
    const runCreateAgent = mapZomeFn(dnaConfig, conductorUri, 'agent', 'agent', 'create_agent');
    const runAssociateMyAgent = mapZomeFn(dnaConfig, conductorUri, 'agent', 'agent', 'associate_my_agent');
    const runUpdateAgent = mapZomeFn(dnaConfig, conductorUri, 'agent', 'agent', 'update_agent');
    const runDeleteAgent = mapZomeFn(dnaConfig, conductorUri, 'agent', 'agent', 'delete_agent');
    const createPerson = async (root, args) => {
        const createAgentArgs = {
            agent: {
                ...args.person,
                agentType: 'Person',
            }
        };
        return (await runCreateAgent(createAgentArgs));
    };
    const associateMyAgent = async (root, args) => {
        return runAssociateMyAgent({ agentAddress: args.agentId });
    };
    const updatePerson = async (root, args) => {
        const updateAgentArgs = {
            agent: {
                ...args.person,
            }
        };
        return (await runUpdateAgent(updateAgentArgs));
    };
    const deletePerson = async (root, args) => {
        return runDeleteAgent(args);
    };
    const createOrganization = async (root, args) => {
        const createAgentArgs = {
            agent: {
                ...args.organization,
                agentType: 'Organization',
            }
        };
        return (await runCreateAgent(createAgentArgs));
    };
    const updateOrganization = async (root, args) => {
        const updateAgentArgs = {
            agent: {
                ...args.organization,
            }
        };
        return (await runUpdateAgent(updateAgentArgs));
    };
    const deleteOrganization = async (root, args) => {
        return runDeleteAgent(args);
    };
    const createAgentRelationship = () => {
        throw new Error('mutation unimplemented');
    };
    const updateAgentRelationship = () => {
        throw new Error('mutation unimplemented');
    };
    const deleteAgentRelationship = () => {
        throw new Error('mutation unimplemented');
    };
    const createAgentRelationshipRole = () => {
        throw new Error('mutation unimplemented');
    };
    const updateAgentRelationshipRole = () => {
        throw new Error('mutation unimplemented');
    };
    const deleteAgentRelationshipRole = () => {
        throw new Error('mutation unimplemented');
    };
    return {
        associateMyAgent,
        createPerson,
        updatePerson,
        deletePerson,
        createOrganization,
        updateOrganization,
        deleteOrganization,
        createAgentRelationship,
        updateAgentRelationship,
        deleteAgentRelationship,
        createAgentRelationshipRole,
        updateAgentRelationshipRole,
        deleteAgentRelationshipRole,
    };
};
//# sourceMappingURL=data:application/json;base64,